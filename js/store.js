// Generated by CoffeeScript 1.11.1
var Empls, Orgs, Store, StoreData, Unis, Users, fetchUserAvatars, genOrgAvatar, genOrgAvatars, identicon;

Users = [];

Empls = [];

Orgs = [];

Unis = [];

// Orgs = _(Orgs).map((function(_this) {
//   return function(entity) {
//     return new Org(entity);
//   };
// })(this));

identicon = function(entity, size) {
  var icon, id, sizePx;
  sizePx = 80;
  if (size === "large") {
    sizePx = 150;
  }
  id = md5(entity.id.toString());
  icon = new Identicon(id, sizePx).toString();
  return "data:image/png;base64," + icon;
};

// genOrgAvatar = function(entity) {
//   entity.avatar = identicon(entity);
//   entity.avatarLg = identicon(entity, "large");
//   return entity;
// };

// genOrgAvatars = function(entities) {
//   return _(entities).map(function(entity) {
//     return genOrgAvatar(entity);
//   });
// };

fetchUserAvatars = function(users) {
  return _(users).map(function(user) {
    var gender;
    gender = user.gender.toLowerCase() === "f" ? "women" : "men";
    user.avatar = "http://api.randomuser.me/portraits/thumb/" + gender + "/" + user.id + ".jpg";
    user.avatarLg = "http://api.randomuser.me/portraits/" + gender + "/" + user.id + ".jpg";
    return user;
  });
};

StoreData = {
  users: Users,
  orgs: Orgs,
  unis: Unis,
  empls: Empls,
  evt: null
};

Store = function() {
  this.update = function(StoreData) {
    return this.trigger('update', StoreData);
  };
  riot.observable(this);
  setTimeout((function(_this) {
    return function() {
      return _this.update(StoreData);
    };
  })(this), 0);
  // Org.all().then((function(_this) {
  //   return function(orgs) {
  //     orgs = genOrgAvatars(orgs);
  //     StoreData.orgs = orgs;
  //     return _this.update(StoreData);
  //   };
  // })(this))["catch"](function(error) {
  //   return c.error("Error: " + error);
  // });
  // User.all().then((function(_this) {
  //   return function(users) {
  //     users = fetchUserAvatars(users);
  //     StoreData.users = users;
  //     return _this.update(StoreData);
  //   };
  // })(this))["catch"](function(error) {
  //   return c.error("Error: " + error);
  // });
  // Empl.all().then((function(_this) {
  //   return function(empl) {
  //     StoreData.empls = empl;
  //     return _this.update(StoreData);
  //   };
  // })(this))["catch"](function(error) {
  //   return c.error("Error: " + error);
  // });
  return this;
};
